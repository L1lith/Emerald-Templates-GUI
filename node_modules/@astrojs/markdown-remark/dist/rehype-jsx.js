var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
import { map } from "unist-util-map";
const MDX_ELEMENTS = /* @__PURE__ */ new Set(["mdxJsxFlowElement", "mdxJsxTextElement"]);
function rehypeJsx() {
  return function(node) {
    return map(node, (child) => {
      if (child.type === "element") {
        return __spreadProps(__spreadValues({}, child), { tagName: `${child.tagName}` });
      }
      if (MDX_ELEMENTS.has(child.type)) {
        const attrs = child.attributes.reduce((acc, entry) => {
          let attr = entry.value;
          if (attr && typeof attr === "object") {
            attr = `{${attr.value}}`;
          } else if (attr && entry.type === "mdxJsxExpressionAttribute") {
            attr = `{${attr}}`;
          } else if (attr === null) {
            attr = "";
          } else if (typeof attr === "string") {
            attr = `"${attr}"`;
          }
          if (!entry.name) {
            return acc + ` ${attr}`;
          }
          return acc + ` ${entry.name}${attr ? "=" : ""}${attr}`;
        }, "");
        if (child.children.length === 0) {
          return {
            type: "raw",
            value: `<${child.name}${attrs} />`
          };
        }
        child.children.splice(0, 0, {
          type: "raw",
          value: `
<${child.name}${attrs}>`
        });
        child.children.push({
          type: "raw",
          value: `</${child.name}>
`
        });
        return __spreadProps(__spreadValues({}, child), {
          type: "element",
          tagName: `Fragment`
        });
      }
      return child;
    });
  };
}
export {
  rehypeJsx as default
};
